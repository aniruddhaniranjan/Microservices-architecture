RELIABILITY - CIRCUIT BREAKER
Services sometimes collaborate when handling requests. When one service synchronously invokes another there is always the possibility that the other service is unavailable or is exhibiting such high latency it is essentially unavailable. Precious resources such as threads might be consumed in the caller while waiting for the other service to respond. This might lead to resource exhaustion, which would make the calling service unable to handle other requests. The failure of one service can potentially cascade to other services throughout the application.

Problem:
How to prevent a network or service failure from cascading to other services?
Solution:
A service client should invoke a remote service via a proxy that functions in a similar fashion to an electrical circuit breaker. When the number of consecutive failures crosses a threshold, the circuit breaker trips, and for the duration of a timeout period all attempts to invoke the remote service will fail immediately. After the timeout expires the circuit breaker allows a limited number of test requests to pass through. If those requests succeed the circuit breaker resumes normal operation. Otherwise, if there is a failure the timeout period begins again.
Benefits:
Services handle the failure of the services that they invoke
Drawbacks:
Choosing timeout periods are tricky - there are chances of seeing false positives or unnecessarily high latency
** EXAMPLE - NETFLIX HISTRIX

SECURITY - ACCESS TOKEN
The application consists of numerous services. The API gateway is the single entry point for client requests. It authenticates requests, and forwards them to other services, which might in turn invoke other services.
Problem:
How to communicate the identity of the requestor to the services that handle the request?
Forces:
Services often need to verify that a user is authorized to perform an operation
Solution:
The API Gateway authenticates the request and passes an access token (e.g. JSON Web Token) that securely identifies the requestor in each request to the services. A service can include the access token in requests it makes to other services.
Benefits:
1. The identity of the requestor is securely passed around the system
2. Services can verify that the requestor is authorized to perform an operation
