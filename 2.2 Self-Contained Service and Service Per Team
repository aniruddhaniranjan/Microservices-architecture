SELF CONTAINED SERVICE
A client of food delivery application creates an order by making an HTTP POST /orders request and expects a response, say, within 600ms. The POST request is first routed to the Order Service, which must then collaborate with the services for Restaurant, Consumer, Kitchen, Accounting, etc. 

The Order Service could invoke each of these services using synchronous request/response. It might, for example, implement the inter-service communication using REST or gRPC. a key drawback of using synchronous request/response is that it reduces availability. That’s because if any of the Order Sevice’s collaborators are unavailable, it will not be able to create the order and must return an error to the client. (Synchronous Request and Response) [https://microservices.io/i/Order-Service-synchronous.png]

An alternative approach is to eliminate all synchronous communication between the Order Service and its collaborators by using the CQRS and Saga patterns. The Order Service can use the CQRS pattern to maintain a replica of the restaurant menu’s and there by eliminate the need to synchronously fetch data from the Restaurant Service. It can validate the order asynchronously by using the Saga pattern. The Order Service creates an Order in a PENDING state and sends back a response to the POST /order. It then completes the creation of the order by communicating asynchronously with the other services.


========================================================================================================================================================================================
SERVICE PER TEAM
