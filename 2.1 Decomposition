Other than SRP, another principle from OOD that can be applied is Common Closure Principle (CCP). The application should be decomposed in a way so that most new and changed requirements only affect a single service. That is because changes that affect multiple services requires coordination across multiple teams, which slows down development. CCP states that classes that change for the same reason should be in the same package. Perhaps, for instance, two classes implement different aspects of the same business rule. The goal is that when that business rule changes developers, only need to change code in a small number - ideally only one - of packages. This kind of thinking makes sense when designing services since it will help ensure that each change should impact only one service.

Driving Forces:
1. Architecture must be stable
2. Services must be cohesive - implement a small set of strongly related functionalities
3. Services must conform to the Common Closure Principle, should be loosely coupled, and should be easily testable
4. Services must be developed easily by small teams, and teams which own one or more services should be autonomous (develop, test, deploy independently)

Different categories of solutions to this are available.
I. DECOMPOSITION BY BUSINESS CAPABILITY
A business capability is a concept from business architecture modeling. It is something that a business does in order to generate value. A business capability often corresponds to a business object - such as order or customer. Business capabilities are often organized into a multi-level hierarchy. For example, an enterprise application might have top-level categories such as Product/Service development, Product/Service delivery, Demand generation, etc. The business capabilities of an online store include management of Product catalog, Inventory, Order, Delivery.

This pattern has the following benefits:
Stable architecture since the business capabilities are relatively stable
Development teams are cross-functional, autonomous, and organized around delivering business value rather than technical features
Services are cohesive and loosely coupled

Issues:
How to identify business capabilities? Identifying business capabilities and hence services requires an understanding of the business. An organization’s business capabilities are identified by analyzing the organization’s purpose, structure, business processes, and areas of expertise. Bounded contexts are best identified using an iterative process. Good starting points for identifying business capabilities are:
organization structure - different groups within an organization might correspond to business capabilities or business capability groups.
high-level domain model - business capabilities often correspond to domain objects

II. DECOMPOSITION BY SUBDOMAIN CONTEXT
Define services corresponding to Domain-Driven Design (DDD) subdomains. DDD refers to the application’s problem space - the business - as the domain. A domain is consists of multiple subdomains. Each subdomain corresponds to a different part of the business. Subdomains can be classified as follows:
Core - key differentiator for the business and the most valuable part of the application
Supporting - related to what the business does but not a differentiator. These can be implemented in-house or outsourced.
Generic - not specific to the business and are ideally implemented using off the shelf software

Advantages are the same as with solution I.

Issues:
How to identify the subdomains? Identifying subdomains and hence services requires an understanding of the business. Like business capabilities, subdomains are identified by analyzing the business and its organizational structure, and identifying the different areas of expertise. Subdomains are best identified using an iterative process. Good starting points for identifying subdomains are:
organization structure - different groups within an organization might correspond to subdomains
high-level domain model - subdomains often have a key domain object
